### OPEN PROGRAM ###
# Open rofi (combi mode)
super + r
 rofi -show combi

# Open rofi (SSH mode)
#super + shift + s
# rofi -show ssh

# Open web browser
super + q
 xdg-open http://

# Open VIM/IDE
super + {a, shift a}
 {$IDE_GUI, $TERMINAL -e vim}

# Open scrcpy
super alt p
  scrcpy -b 99000000 -m 900

# Start VNC virtual screen

# Open file browser(TUI/GUI)
super + {e, shift e}
 {$TERMINAL -e $FILE,\
 $FILE_GUI}

# Open text editor(TUI/GUI)
#super + {t, shift t}
# {$TERMINAL -e $EDITOR,\
# $EDITOR_GUI}

# Open pinger
super p
 $TERMINAL -e ping 1.1.1.1 -i 0.2

# Open clipboard content in mpv
super + y
 mpv-fifo.sh &

# Focus the special-purpose youtube player
super + shift + y
 xdotool windowactivate $(xdotool search --name "main_player")
 
# Screen locker
{control + alt + l, XF86ScreenSaver}
 $LOCKSCREEN

# Screen locker
{super + control + alt + l, super + XF86ScreenSaver}
 pactl set-sink-mute @DEFAULT_SINK@ 1 ; lock-glitch 
 
# Keyboard layout
super + alt + space
 rofi-keyboard

# Open terminal
super + Return
 $TERMINAL

# Open list of sxhkd keybinds
super + alt + m
 rofi-sxhkd

# Open Screenshot tool
super + Print
 pgrep flameshot >/dev/null || flameshot & ; flameshot gui &

# Open Screenshot tool
super + shift + Print
 gif.sh &

# Open custom script menu
super + z 
 rofi-select

# Restart keybind daemon
control alt k
 pkill -SIGUSR1 sxhkd

# Open communication apps
super w ; {w,l}
 firefox --new-window {https://web.whatsapp.com,\
 https://www.linkedin.com,\}

# Run dirty-scripts for rapid testing
super + F{1,2,3,4,5}
 dirty_binds {1,2,3,4,5}
super + shift F{1,2,3,4,5}
 dirty_binds {1,2,3,4,5} t
super F6
 $TERMINAL -e $EDITOR $(which dirty_actions)

# Open other apps
super w ; {k,r,g,m,c}
 {keepassxc,\
 firefox --new-window https://www.reddit.com,\
 firefox --new-window https://github.com,\
 pgrep mpd >/dev/null && $TERMINAL -e ncmpcpp || (mpd && $TERMINAL -e ncmpcpp),\
 speedcrunch}

# Open Gmail
alt m ; {1,2,3}
 firefox --new-window https://mail.google.com/mail/u/{0,1,2}

# Volume
XF86Audio{RaiseVolume,LowerVolume}
 pactl set-sink-volume @DEFAULT_SINK@ {+10%,-10%} ; \
 dunstify -r "85102" -a Volume -u low -t 500 "Volume: $(amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p'| uniq) $(amixer get Master | tail -n 1 | grep -q off && echo Muted)"

XF86AudioMute
 pactl set-sink-mute @DEFAULT_SINK@ toggle ; \
 dunstify -r "85102" -a Volume -u low -t 500 "Volume: $(amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p'| uniq) $(amixer get Master | tail -n 1 | grep -q off && echo Muted)"
 amixer get Master | tail -n 1 | grep off && echo yeeprer
# Scroll Volume
super {button4,button5}
 pactl set-sink-volume @DEFAULT_SINK@ {+3%,-3%} ; \
 dunstify -r "85102" -a Volume -u low -t 500 "Volume: $(amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p'| uniq) $(amixer get Master | tail -n 1 | grep -q off && echo Muted)"

# Playback
XF86Audio{Next,Prev,Play,Stop}
 mpc {next,prev,toggle,stop}

# Brightness
{XF86MonBrightnessUp, XF86MonBrightnessDown}
 xbacklight -{inc,dec} 20 -time 150 ; \
 dunstify -r "71123" -a Brightness -u low -t 700 "Brightness: $(xbacklight -get | cut -d. -f1)" 
super + alt + {button4,button5}
 xbacklight -{inc,dec} 6 -time 50 ; \
 dunstify -r "71123" -a Brightness -u low -t 700 "Brightness: $(xbacklight -get | cut -d. -f1)" 

# Screen "Warmness"
super + ctrl + {button4,button5,Return}
 xrandr-gamma.sh {w,c,r}


###### Numpad media ######
# Volume
shift + {KP_Up,KP_Down}
 pactl set-sink-volume @DEFAULT_SINK@ {+10%,-10%} ; \
 dunstify -r "85102" -a Volume -u low -t 500 "Volume: $(amixer get Master | sed -n 's/^.*\[\([0-9]\+\)%.*$/\1/p'| uniq) $(amixer get Master | tail -n 1 | grep -q off && echo Muted)"
# Skip mpv
shift + {KP_Home, KP_Prior} 
 pgrep mpv >/dev/null && xdotool key --clearmodifiers --window $(xdotool search --class mpv) {Left,Right}
# Play/pause mpv
shift + KP_Begin
 xdotool key --clearmodifiers --window $(xdotool search --limit 1 --name "Youtube - Mozilla Firefox") k || \
 pgrep mpv >/dev/null && xdotool key --clearmodifiers --window $(xdotool search --class mpv) space

######## BSPWM-Specific binds #########
# Close WM
super + shift + Escape
 pkill lemonbar ; \
 bspc quit

# Suspend the system
super + shift + BackSpace
 lock-glitch && systemctl suspend

# Close/Kill active window
super + {_,shift +}c
 bspc node -{c,k}

# Toggle Monocle mode
super + space
 bspc desktop -l next

# Switch/move to workspace
super + {_,shift + }{1-9,0}
 bspc {desktop -f,node -d} focused:^{1-9,10}
#bspc {desktop -f,node -d} '^{1-9,10}'

# Switch to monitor
super + alt + {1-9}
 bspc monitor --focus ^{1-9}

# Switch to last node
super + grave
 bspc node --focus last

# Switch to last desktop
super + shift + grave
 bspc desktop --focus last

# Switch to last monitor
super + alt + grave
 bspc monitor --focus last

# Move next/previous monitor
super + alt + {h,j,k,l}
 bspc monitor --focus {west,south,north,east}

# Focus/move node in direction
#super + {_,shift + }{h,j,k,l}
# bspc node -{f,s} {west,south,north,east} \

# Focus node in direction
super + {h,j,k,l}
 bspc node -f {west,south,north,east}

# Move node in direction
super + shift + h
 bspc node focused -v -50 0 >/dev/null || \
 bspc node focused -s west 
super + shift + j
 bspc node focused -v 0 50 >/dev/null || \
 bspc node focused -s south
super + shift + k
 bspc node focused -v 0 -50 >/dev/null || \
 bspc node focused -s north 
super + shift + l
 bspc node focused -v 50 0 >/dev/null || \
 bspc node focused -s east 

# Resize node
super + ctrl + {h,j,k,l}
 bspc node -z {right -30 0 ; bspc node -z left 30 0,\
 bottom 0 30 ; bspc node -z top 0 -30,\
 bottom 0 -30 ; bspc node -z top 0 30,\
 right 30 0 ; bspc node -z left -30 0}
super + ctrl + {minus,equal}
 bspc node -z {right -50 0 ; bspc node -z left 50 0 ; bspc node -z bottom 0 -50 ; bspc node -z top 0 50, \
 bottom 0 50 ; bspc node -z top 0 -50 ; bspc node -z right 50 0 ; bspc node -z left -50 0}
 

# Win+G : Move active window to biggest space
super + g
 bspc node -s biggest.local

# Set window to tiled
super + t
 bspc node -t tiled

# Set window to pseudo-tiled
super + shift + t
 bspc node -t pseudo_tiled

# Set window to floating
super + f
 bspc node -t floating

# Set window to fullscreen
super + shift + f
 bspc node -t fullscreen
# Toggle node close immunity
super + ctrl + x
	bspc node -g locked
	
# Node persists on all desktops
super + ctrl + y
	bspc node -g sticky

# Tries to keep the node in same tiling position/size.
super + ctrl + z
	bspc node -g private

# Set node in below layer
super + ctrl + s
 bspc node -l below

# Set node in normal layer
super + s
 bspc node -l normal

# Set node in above layer
super + shift + s
 bspc node -l above

# Hide window
super + n
 bspc node -g hidden

# Unhide window
super + shift + n
 bspc node {,$(bspc query -N -n .hidden | tail -n1)} -g hidden=off

# Create desktop
super + d ; c
 CREATEVAR=$(rofi -location 2 -yoffset 1 -bw 2 -dmenu -width 200 -p "Create") && bspc monitor -f --add-desktops "$CREATEVAR"

# Rename desktop
super + d ; r
 RENAMEVAR=$(rofi -location 2 -yoffset 1 -bw 2 -dmenu -width 200 -p "Rename") && bspc desktop focused -n "$RENAMEVAR"

# Delete desktop
super + d ; d
 bspc desktop -f --remove

# Resize gaps
super ctrl g : {k,j}
 bspc config -d focused window_gap $((`bspc config -d focused window_gap` {-,+} 5 ))

# Make all nodes occupy same amount of area
super + equal
	bspc node @/ --balance

# Ironically, this works implicitly and breaks otherwise
# Win + LeftClick : Move window
#super + button{1-2}
 #bspc pointer -g {move,resize_corner}

# Cycle between nodes
super + {_,shift +} Tab 
	bspc node -f {next,prev}.local

# Move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-50 0,0 50,0 -50,50 0}

# Flip node children orientation
super + shift + r
 bspc node @parent -R 90
super + ctrl + r
 bspc node @/ -R 90

# Swap current desktop with the last one
super + shift + s
 bspc desktop -s last

# Set WM to floating
super alt f
 bspc rule -a "*" state=floating

# Set WM to tiling
super alt t
 bspc rule -a "*" state=tiled
